{"version":3,"sources":["img/logo.png","components/Header/Header.js","components/Character/Character.js","components/Spinner/Spinner.js","components/Characters/Characters.js","components/Search/Search.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","require","alt","Character","item","img","name","portrayed","nickname","birthday","status","Spinner","role","Characters","props","isLoading","items","map","key","char_id","Search","useState","setText","type","placeholder","onChange","e","target","value","getQuery","autoFocus","Footer","Date","getFullYear","App","setItems","setIsLoading","setName","useEffect","a","axios","result","data","fetchItems","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qKAAAA,EAAOC,QAAU,IAA0B,kC,oNCkB5BC,G,MAfA,WACX,OACI,gCACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,aACX,yBAAKC,IAAKC,EAAQ,IAAuBC,IAAI,SAC7C,wECsBTC,G,YA7BG,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACjB,OACI,yBAAKL,UAAU,QACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,cACX,yBAAKC,IAAKI,EAAKC,IAAKH,IAAI,MAE5B,yBAAKH,UAAU,aACX,4BAAKK,EAAKE,MACV,4BACI,4BACI,+CADJ,IACiC,8BAAOF,EAAKG,YAE7C,4BACI,6CADJ,IAC+B,8BAAOH,EAAKI,WAE3C,4BACI,6CADJ,IAC+B,8BAAOJ,EAAKK,WAE3C,4BACI,2CADJ,IAC6B,8BAAOL,EAAKM,eCNlDC,G,MAbC,WACZ,OACI,oCACI,yBAAKZ,UAAU,UACX,yBAAKA,UAAU,0BAA0Ba,KAAK,UAC1C,0BAAMb,UAAU,WAAhB,mBCSLc,EAZI,SAACC,GAChB,OACI,yBAAKf,UAAU,aACVe,EAAMC,UAAY,wCAAG,kBAAC,EAAD,MAAH,KACf,6BAAShB,UAAU,SACde,EAAME,MAAMC,KAAI,SAAAb,GAAI,OACjB,kBAAC,EAAD,CAAWc,IAAKd,EAAKe,QAASf,KAAMA,UCa7CgB,G,MAtBA,SAACN,GAAW,IAAD,EACEO,mBAAS,IADX,mBACTC,GADS,WAOtB,OACI,yBAAKvB,UAAU,oBACX,8BACI,2BACIwB,KAAK,OACLxB,UAAU,eACVyB,YAAY,sBACZC,SAAU,SAACC,GAAD,OAXHpB,EAWwBoB,EAAEC,OAAOC,MAVpDN,EAAQhB,QACRQ,EAAMe,SAASvB,GAFG,IAACA,GAYPwB,WAAS,QCPdC,G,MARA,WACX,OACI,8CACiB,2CADjB,UAC6C,IAAIC,MAAOC,iB,iBC2BjDC,G,MAxBH,WAAO,IAAD,EACUb,mBAAS,IADnB,mBACTL,EADS,KACFmB,EADE,OAEkBd,oBAAS,GAF3B,mBAETN,EAFS,KAEEqB,EAFF,OAGQf,mBAAS,IAHjB,mBAGTf,EAHS,KAGH+B,EAHG,KAchB,OATAC,qBAAU,YACQ,uCAAG,4BAAAC,EAAA,sEACIC,IAAM,sDAAD,OAAuDlC,IADhE,OACXmC,EADW,OAEjBN,EAASM,EAAOC,MAChBN,GAAa,GAHI,2CAAH,qDAKhBO,KACC,CAACrC,IAGF,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQuB,SAAU,SAACvB,GAAD,OAAU+B,EAAQ/B,MACpC,kBAAC,EAAD,CAAYS,UAAWA,EAAWC,MAAOA,IACzC,kBAAC,EAAD,SChBc4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ceb590e8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.3795f66d.png\";","import React from 'react';\r\nimport './Header.css';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header>\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-12\">\r\n                        <img src={require('../../img/logo.png')} alt=\"logo\" />\r\n                        <p>All the characters from the tv show</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './Character.css';\r\n\r\nconst Character = ({ item }) => {\r\n    return (\r\n        <div className='card'>\r\n            <div className='card-inner'>\r\n                <div className='card-front'>\r\n                    <img src={item.img} alt='' />\r\n                </div>\r\n                <div className='card-back'>\r\n                    <h1>{item.name}</h1>\r\n                    <ul>\r\n                        <li>\r\n                            <strong>Actor Name:</strong> <span>{item.portrayed}</span>\r\n                        </li>\r\n                        <li>\r\n                            <strong>Nickname:</strong> <span>{item.nickname}</span>\r\n                        </li>\r\n                        <li>\r\n                            <strong>Birthday:</strong> <span>{item.birthday}</span>\r\n                        </li>\r\n                        <li>\r\n                            <strong>Status:</strong> <span>{item.status}</span>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Character;","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <>\r\n            <div className=\"center\">\r\n                <div className=\"spinner-grow text-light\" role=\"status\">\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                </div>\r\n                {/* <img src={require('../../img/spinner.gif')} alt=\"loading\" /> */}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Spinner;","import React from 'react';\r\nimport './Characters.css';\r\nimport Character from './../Character/Character';\r\nimport Spinner from './../Spinner/Spinner';\r\n\r\n\r\nconst Characters = (props) => {\r\n    return (\r\n        <div className=\"container\">\r\n            {props.isLoading ? <> <Spinner /> </> :\r\n                <section className=\"cards\">\r\n                    {props.items.map(item => (\r\n                        <Character key={item.char_id} item={item} />))}\r\n                </section>}\r\n        </div >\r\n    );\r\n};\r\n\r\nexport default Characters;","import React, { useState } from 'react';\r\nimport './Search.css';\r\n\r\nconst Search = (props) => {\r\n    const [text, setText] = useState('');\r\n\r\n    const inputOnChange = (name) => {\r\n        setText(name);\r\n        props.getQuery(name);\r\n    }\r\n    return (\r\n        <div className=\"container Search\">\r\n            <form>\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    placeholder=\"Search character...\"\r\n                    onChange={(e) => inputOnChange(e.target.value)}\r\n                    autoFocus\r\n                />\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\nimport './Footer.css';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer>\r\n            Made by&nbsp;<p>Matei Mircea</p>&nbsp;@ {new Date().getFullYear()}\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React, { useState, useEffect } from 'react';\nimport Header from './components/Header/Header';\nimport Characters from './components/Characters/Characters';\nimport Search from './components/Search/Search';\nimport Footer from './components/Footer/Footer';\n\nimport axios from 'axios';\nimport './App.css';\n\nconst App = () => {\n  const [items, setItems] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [name, setName] = useState('');\n\n  useEffect(() => {\n    const fetchItems = async () => {\n      const result = await axios(`https://www.breakingbadapi.com/api/characters?name=${name}`);\n      setItems(result.data);\n      setIsLoading(false);\n    }\n    fetchItems();\n  }, [name])\n\n  return (\n    <>\n      <Header />\n      <Search getQuery={(name) => setName(name)} />\n      <Characters isLoading={isLoading} items={items} />\n      <Footer />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}